// Generated from fusion.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class fusionLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly RETURN = 15;
	public static readonly STR_LIT = 16;
	public static readonly ID = 17;
	public static readonly INT = 18;
	public static readonly NEWLINE = 19;
	public static readonly WS = 20;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "RETURN", "STR_LIT", "ID", 
		"INT", "NEWLINE", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'+'", "'-'", "'>'", "'<'", "'('", "')'", "'{'", "'}'", "'import'", 
		"'if'", "'while'", "','", "':'", "'='", "'return'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "RETURN", "STR_LIT", "ID", "INT", "NEWLINE", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(fusionLexer._LITERAL_NAMES, fusionLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return fusionLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(fusionLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "fusion.g4"; }

	// @Override
	public get ruleNames(): string[] { return fusionLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return fusionLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return fusionLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return fusionLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x16}\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03" +
		"\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11]\n\x11\f\x11\x0E\x11`\v\x11\x03" +
		"\x11\x03\x11\x03\x12\x03\x12\x07\x12f\n\x12\f\x12\x0E\x12i\v\x12\x03\x13" +
		"\x06\x13l\n\x13\r\x13\x0E\x13m\x03\x14\x06\x14q\n\x14\r\x14\x0E\x14r\x03" +
		"\x14\x03\x14\x03\x15\x06\x15x\n\x15\r\x15\x0E\x15y\x03\x15\x03\x15\x02" +
		"\x02\x02\x16\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r" +
		"\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B" +
		"\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15" +
		")\x02\x16\x03\x02\b\x04\x02$$^^\x05\x02C\\aac|\x06\x022;C\\aac|\x03\x02" +
		"2;\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x02\x82\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x03+\x03\x02\x02\x02\x05-\x03\x02\x02\x02\x07/\x03\x02\x02" +
		"\x02\t1\x03\x02\x02\x02\v3\x03\x02\x02\x02\r5\x03\x02\x02\x02\x0F7\x03" +
		"\x02\x02\x02\x119\x03\x02\x02\x02\x13;\x03\x02\x02\x02\x15B\x03\x02\x02" +
		"\x02\x17E\x03\x02\x02\x02\x19K\x03\x02\x02\x02\x1BM\x03\x02\x02\x02\x1D" +
		"O\x03\x02\x02\x02\x1FQ\x03\x02\x02\x02!X\x03\x02\x02\x02#c\x03\x02\x02" +
		"\x02%k\x03\x02\x02\x02\'p\x03\x02\x02\x02)w\x03\x02\x02\x02+,\x07-\x02" +
		"\x02,\x04\x03\x02\x02\x02-.\x07/\x02\x02.\x06\x03\x02\x02\x02/0\x07@\x02" +
		"\x020\b\x03\x02\x02\x0212\x07>\x02\x022\n\x03\x02\x02\x0234\x07*\x02\x02" +
		"4\f\x03\x02\x02\x0256\x07+\x02\x026\x0E\x03\x02\x02\x0278\x07}\x02\x02" +
		"8\x10\x03\x02\x02\x029:\x07\x7F\x02\x02:\x12\x03\x02\x02\x02;<\x07k\x02" +
		"\x02<=\x07o\x02\x02=>\x07r\x02\x02>?\x07q\x02\x02?@\x07t\x02\x02@A\x07" +
		"v\x02\x02A\x14\x03\x02\x02\x02BC\x07k\x02\x02CD\x07h\x02\x02D\x16\x03" +
		"\x02\x02\x02EF\x07y\x02\x02FG\x07j\x02\x02GH\x07k\x02\x02HI\x07n\x02\x02" +
		"IJ\x07g\x02\x02J\x18\x03\x02\x02\x02KL\x07.\x02\x02L\x1A\x03\x02\x02\x02" +
		"MN\x07<\x02\x02N\x1C\x03\x02\x02\x02OP\x07?\x02\x02P\x1E\x03\x02\x02\x02" +
		"QR\x07t\x02\x02RS\x07g\x02\x02ST\x07v\x02\x02TU\x07w\x02\x02UV\x07t\x02" +
		"\x02VW\x07p\x02\x02W \x03\x02\x02\x02X^\x07$\x02\x02Y]\n\x02\x02\x02Z" +
		"[\x07^\x02\x02[]\v\x02\x02\x02\\Y\x03\x02\x02\x02\\Z\x03\x02\x02\x02]" +
		"`\x03\x02\x02\x02^\\\x03\x02\x02\x02^_\x03\x02\x02\x02_a\x03\x02\x02\x02" +
		"`^\x03\x02\x02\x02ab\x07$\x02\x02b\"\x03\x02\x02\x02cg\t\x03\x02\x02d" +
		"f\t\x04\x02\x02ed\x03\x02\x02\x02fi\x03\x02\x02\x02ge\x03\x02\x02\x02" +
		"gh\x03\x02\x02\x02h$\x03\x02\x02\x02ig\x03\x02\x02\x02jl\t\x05\x02\x02" +
		"kj\x03\x02\x02\x02lm\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02" +
		"n&\x03\x02\x02\x02oq\t\x06\x02\x02po\x03\x02\x02\x02qr\x03\x02\x02\x02" +
		"rp\x03\x02\x02\x02rs\x03\x02\x02\x02st\x03\x02\x02\x02tu\b\x14\x02\x02" +
		"u(\x03\x02\x02\x02vx\t\x07\x02\x02wv\x03\x02\x02\x02xy\x03\x02\x02\x02" +
		"yw\x03\x02\x02\x02yz\x03\x02\x02\x02z{\x03\x02\x02\x02{|\b\x15\x02\x02" +
		"|*\x03\x02\x02\x02\t\x02\\^gmry\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!fusionLexer.__ATN) {
			fusionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(fusionLexer._serializedATN));
		}

		return fusionLexer.__ATN;
	}

}

